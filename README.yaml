name: "aws-datadog-synthetics"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-datadog-synthetics"
# Short description of this project
description: |-
  This component provides the ability to implement
  [Datadog synthetic tests](https://docs.datadoghq.com/synthetics/guide/).

  Synthetic tests allow you to observe how your systems and applications are performing using simulated requests and
  actions from the AWS managed locations around the globe, and to monitor internal endpoints from
  [Private Locations](https://docs.datadoghq.com/synthetics/private_locations).

  ## Sponsorship

  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://cloudposse.com/images/partners/datadog-white.svg">
    <source media="(prefers-color-scheme: light)" srcset="https://cloudposse.com/images/partners/datadog-purple.svg">
    <img alt="Datadog" src="https://cloudposse.com/images/partners/datadog-purple.svg" align="right" width="40%">
  </picture>


  This project is supported by the [Datadog Open Source Program](https://www.datadoghq.com/partner/open-source/).

  As part of this collaboration, Datadog provides a dedicated sandbox account that we use for automated integration and acceptance testing. This contribution allows us to continuously validate changes against a real Datadog environment, improving reliability and reducing the risk of regressions.

  We are grateful to Datadog for supporting our open source ecosystem and helping ensure that infrastructure code for Terraform remains stable and well-tested
  ___

usage: |-
  **Stack Level**: Regional

  Here's an example snippet for how to use this component:

  ### Stack Configuration

  ```yaml
  components:
    terraform:
      datadog-synthetics:
        metadata:
          component: "datadog-synthetics"
        settings:
          spacelift:
            workspace_enabled: true
        vars:
          enabled: true
          name: "datadog-synthetics"
          locations:
            - "all"
          # List of paths to Datadog synthetic test configurations
          synthetics_paths:
            - "catalog/synthetics/examples/*.yaml"
          synthetics_private_location_component_name: "datadog-synthetics-private-location"
          private_location_test_enabled: true
  ```

  ### Synthetics Configuration Examples

  Below are examples of Datadog browser and API synthetic tests.

  The synthetic tests are defined in YAML using either the
  [Datadog Terraform provider](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/synthetics_test)
  schema or the [Datadog Synthetics API](https://docs.datadoghq.com/api/latest/synthetics) schema. See the
  `terraform-datadog-platform` Terraform module
  [README](https://github.com/cloudposse/terraform-datadog-platform/blob/main/modules/synthetics/README.md) for more
  details. We recommend using the API schema so you can more create and edit tests using the Datadog web API and then
  import them into this module by downloading the test using the Datadog REST API. (See the Datadog API documentation for
  the appropriate `curl` commands to use.)

  ```yaml
  # API schema
  my-browser-test:
    name: My Browser Test
    status: live
    type: browser
    config:
      request:
        method: GET
        headers: {}
        url: https://example.com/login
      setCookie: |-
        DatadogTest=true
    message: "My Browser Test Failed"
    options:
      device_ids:
        - chrome.laptop_large
        - edge.tablet
        - firefox.mobile_small
      ignoreServerCertificateError: false
      disableCors: false
      disableCsp: false
      noScreenshot: false
      tick_every: 86400
      min_failure_duration: 0
      min_location_failed: 1
      retry:
        count: 0
        interval: 300
      monitor_options:
        renotify_interval: 0
      ci:
        executionRule: non_blocking
      rumSettings:
        isEnabled: false
      enableProfiling: false
      enableSecurityTesting: false
    locations:
      - aws:us-east-1
      - aws:us-west-2

  # Terraform schema
  my-api-test:
    name: "API Test"
    message: "API Test Failed"
    type: api
    subtype: http
    tags:
      - "managed-by:Terraform"
    status: "live"
    request_definition:
      url: "CHANGEME"
      method: GET
    request_headers:
      Accept-Charset: "utf-8, iso-8859-1;q=0.5"
      Accept: "text/json"
    options_list:
      tick_every: 1800
      no_screenshot: false
      follow_redirects: true
      retry:
        count: 2
        interval: 10
      monitor_options:
        renotify_interval: 300
    assertion:
      - type: statusCode
        operator: is
        target: "200"
      - type: body
        operator: validatesJSONPath
        targetjsonpath:
          operator: is
          targetvalue: true
          jsonpath: foo.bar
  ```

  These configuration examples are defined in the YAML files in the
  [catalog/synthetics/examples](https://github.com/cloudposse/terraform-aws-components/tree/main/modules/datadog-synthetics/catalog/synthetics/examples)
  folder.

  You can use different subfolders for your use-case. For example, you can have `dev` and `prod` subfolders to define
  different synthetic tests for the `dev` and `prod` environments.

  Then use the `synthetic_paths` variable to point the component to the synthetic test configuration files.

  The configuration files are processed and transformed in the following order:

  - The `datadog-synthetics` component loads the YAML configuration files from the filesystem paths specified by the
    `synthetics_paths` variable

  - Then, in the
    [synthetics](https://github.com/cloudposse/terraform-datadog-platform/blob/master/modules/synthetics/main.tf) module,
    the YAML configuration files are merged and transformed from YAML into the
    [Datadog Terraform provider](https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/synthetics_test)
    schema

  - And finally, the Datadog Terraform provider uses the
    [Datadog Synthetics API](https://docs.datadoghq.com/api/latest/synthetics) specifications to call the Datadog API and
    provision the synthetic tests

  <!-- prettier-ignore-start -->
  <!-- prettier-ignore-end -->

references:
  - name: Datadog Synthetics
    url: https://docs.datadoghq.com/synthetics
    description:
  - name: Getting Started with Synthetic Monitoring
    url: https://docs.datadoghq.com/getting_started/synthetics
    description:
  - name: Synthetic Monitoring Guides
    url: https://docs.datadoghq.com/synthetics/guide
    description:
  - name: Using Synthetic Test Monitors
    url: https://docs.datadoghq.com/synthetics/guide/synthetic-test-monitors
    description:
  - name: Create An API Test With The API
    url: https://docs.datadoghq.com/synthetics/guide/create-api-test-with-the-api
    description:
  - name: Manage Your Browser Tests Programmatically
    url: https://docs.datadoghq.com/synthetics/guide/manage-browser-tests-through-the-api
    description:
  - name: Browser Tests
    url: https://docs.datadoghq.com/synthetics/browser_tests
    description:
  - name: Synthetics API
    url: https://docs.datadoghq.com/api/latest/synthetics
    description:
  - name: Terraform resource `datadog_synthetics_test`
    url: https://registry.terraform.io/providers/DataDog/datadog/latest/docs/resources/synthetics_test
    description:
tags:
  - component/datadog-synthetics
  - layer/datadog
  - provider/aws
  - provider/datadog
# Categories of this project
categories:
  - component/datadog-synthetics
  - layer/datadog
  - provider/aws
  - provider/datadog
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-datadog-synthetics.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-datadog-synthetics/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
